{"version":3,"file":"validater.js","sourceRoot":"/","sources":["middleware/validater.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uDAAqD;AACrD,8DAA+B;AAE/B,iEAAsD;AACtD,0CAAyC;AAEzC,aAAa;AACN,IAAM,SAAS,GAAG,UAAC,GAAG,EAAE,GAAG,EAAE,IAAI;IACtC,IAAM,MAAM,GAAG,IAAA,oCAAgB,EAAC,GAAG,CAAC,CAAC;IAErC,IAAI,MAAM,CAAC,OAAO,EAAE,EAAE;QACpB,OAAO,IAAI,EAAE,CAAC;KACf;IAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAC3D,CAAC,CAAC;AARW,QAAA,SAAS,aAQpB;AAEF,EAAE;AACF,SAAS;AACT,SAAsB,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI;;;;;YACrC,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;YAE7C,IAAI,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE;gBACrD,sBAAO,GAAG;yBACP,MAAM,CAAC,GAAG,CAAC;yBACX,IAAI,CAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC,EAAC;aACxD;YAEK,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAEvC,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,eAAM,CAAC,GAAG,CAAC,SAAS,EAAE,UAAO,KAAK,EAAE,OAAO;;;;;4BAC3D,IAAI,KAAK,EAAE;gCACT,sBAAO,GAAG;yCACP,MAAM,CAAC,GAAG,CAAC;yCACX,IAAI,CAAC,EAAE,OAAO,EAAE,+BAA+B,EAAE,CAAC,EAAC;6BACvD;4BAEY,qBAAM,2BAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,EAAA;;4BAAzC,IAAI,GAAG,SAAkC;4BAE/C,IAAI,CAAC,IAAI,EAAE;gCACT,sBAAO,GAAG;yCACP,MAAM,CAAC,GAAG,CAAC;yCACX,IAAI,CAAC,EAAE,OAAO,EAAE,+BAA+B,EAAE,CAAC,EAAC;6BACvD;4BACD,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,iBAAiB;4BACpC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;4BAC3B,IAAI,EAAE,CAAC;;;;iBACR,CAAC,CAAC;;;;CACJ;AA7BD,4BA6BC;AAED,4BAA4B;AAC5B,gBAAgB;AAChB,4CAA4C","sourcesContent":["import { validationResult } from \"express-validator\";\nimport jwt from \"jsonwebtoken\";\n\nimport { AppUser } from \"../schema/appUser_schema.js\";\nimport { config } from \"../utils/config\";\n\n// 벨리데이터 에러조건\nexport const validater = (req, res, next) => {\n  const errors = validationResult(req);\n\n  if (errors.isEmpty()) {\n    return next();\n  }\n\n  return res.status(400).json({ message: errors.array() });\n};\n\n//\n// 나인지 검증\nexport async function isVerify(req, res, next) {\n  const authHeader = req.headers.authorization;\n\n  if (!(authHeader && authHeader.startsWith(\"Bearer \"))) {\n    return res\n      .status(401)\n      .json({ message: \"Authentication Error _ 존재하지 않음\" });\n  }\n\n  const token = authHeader.split(\" \")[1];\n\n  jwt.verify(token, config.jwt.secretKey, async (error, decoded) => {\n    if (error) {\n      return res\n        .status(401)\n        .json({ message: \"Authentication Error _ jwt 에러\" });\n    }\n\n    const user = await AppUser.findById(decoded.id);\n\n    if (!user) {\n      return res\n        .status(401)\n        .json({ message: \"Authentication Error_사용자 찾지못함\" });\n    }\n    req.uid = user.id; // req.customData\n    req.userEmail = user.email;\n    next();\n  });\n}\n\n// 두개의 토큰을 비교하여 callback 한다.\n// 토큰의 검증이 완료된다면\n// decoded data 인  req.uid = user.id 을 추가한다.\n"]}